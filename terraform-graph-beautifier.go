package main

import (
	"flag"
	"github.com/pcasteran/terraform-graph-beautifier/tfgraph"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
	"path/filepath"
)

func getWorkingDir() string {
	dir, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	return filepath.Base(dir)
}

func main() {
	// Parse command line arguments.
	inputFilePath := flag.String("input", "", "Path of the input Graphviz file to read, if not set 'stdin' is used")
	outputFilePath := flag.String("output", "", "Path of the output Graphviz file to write, if not set 'stdout' is used")
	var excludePatterns arrayFlags
	flag.Var(&excludePatterns, "exclude", "Pattern (regexp) of the resource to filter out (can be repeated multiple times)")
	keepTfJunk := flag.Bool("keep-tf-junk", false, "Do not remove the \"junk\" nodes and edges generated by 'terraform graph' (default false)")
	graphName := flag.String("graph-name", "", "Name of the Graphviz graph to create (default working directory name)")
	debug := flag.Bool("debug", false, "Prints debugging information to stderr")
	flag.Parse()

	if *graphName == "" {
		cwd := getWorkingDir()
		graphName = &cwd
	}

	// Configure logging.
	// Default level for this example is info, unless debug flag is present.
	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	if *debug {
		zerolog.SetGlobalLevel(zerolog.DebugLevel)
	}
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

	// Load the graph from the specified input.
	graphIn := LoadGraph(*inputFilePath, *keepTfJunk, excludePatterns)

	// Build the Terraform resource graph.
	tfGraph, dependencies := tfgraph.BuildTfGraphFromGraphviz(graphIn)

	// Write the result to the specified output.
	WriteGraph(*outputFilePath, tfGraph, dependencies, *graphName)
}
