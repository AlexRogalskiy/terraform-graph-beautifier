package main

import (
	"flag"
	"fmt"
	"github.com/awalterschulze/gographviz"
	"github.com/pcasteran/terraform-graph-beautifier/tfgraph"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
)

func main() {
	// Parse command line arguments.
	inputFilePath := flag.String("input", "", "Path of the input Graphviz file to read, if not set 'stdin' is used")
	var excludePatterns arrayFlags
	flag.Var(&excludePatterns, "exclude", "Pattern (regexp) of the resource to filter out (can be repeated multiple times)")
	keepTfJunk := flag.Bool("keep-tf-junk", false, "Do not remove the \"junk\" nodes and edges generated by 'terraform graph' (default false)")
	debug := flag.Bool("debug", false, "Prints debugging information to stderr")
	flag.Parse()

	// Configure logging.
	// Default level for this example is info, unless debug flag is present.
	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	if *debug {
		zerolog.SetGlobalLevel(zerolog.DebugLevel)
	}
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

	// Load the graph from the specified input.
	graphIn := loadGraph(*inputFilePath, *keepTfJunk, excludePatterns)

	// Build the Terraform resource graph.
	_= /*tfGraph :=*/ tfgraph.BuildTfGraphFromGraphviz(graphIn)

	// Build the output Graphviz graph.
	graphOut := gographviz.NewGraph()
	graphOut.Name = "" // TODO : name or current directory
	graphOut.Directed = true

	// TODO : temp for tests
	output := graphIn.String()
	fmt.Println(output)

	fo, err := os.Create("samples/output.gv")
	if err != nil {
		panic(err)
	}
	defer func() {
		if err := fo.Close(); err != nil {
			panic(err)
		}
	}()
	_, _ = fo.WriteString(output)
}
