package main

import (
	"flag"
	"fmt"
	"github.com/awalterschulze/gographviz"
	tfgraph "github.com/pcasteran/terraform-graph-beautifier/tfgraph"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
	"regexp"
	"strings"
)

var /* const */ tfResourceRegexp = regexp.MustCompile(`^"root.(.*)"$`)
var /* const */ tfModuleRegexp = regexp.MustCompile(`module\.(.*?)\.(.*)`)

func main() {
	// Parse command line arguments.
	inputFilePath := flag.String("input", "", "Path of the input Graphviz file to read, if not set 'stdin' is used")
	var excludePatterns arrayFlags
	flag.Var(&excludePatterns, "exclude", "Pattern (regexp) of the resource to filter out (can be repeated multiple times)")
	keepTfJunk := flag.Bool("keep-tf-junk", false, "Do not remove the \"junk\" nodes and edges generated by 'terraform graph' (default false)")
	debug := flag.Bool("debug", false, "Prints debugging information to stderr")
	flag.Parse()

	// Configure logging.
	// Default level for this example is info, unless debug flag is present.
	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	if *debug {
		zerolog.SetGlobalLevel(zerolog.DebugLevel)
	}
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

	// Load the graph from the specified input.
	graphIn := loadGraph(*inputFilePath, *keepTfJunk, excludePatterns)

	// Reconstruct the Terraform resources hierarchy.
	root := tfgraph.NewModule(nil, "root")
	for _, node := range graphIn.Nodes.Nodes {
		// Check node name.
		if !tfResourceRegexp.MatchString(node.Name) {
			log.Fatal().
				Str("name", node.Name).
				Msg("Invalid node name")
		}

		// Get the TF resource qualified name from the 'label' attribute
		// and find its parent module sub-graph(es).
		resourceQualifiedName := strings.ReplaceAll(node.Attrs[gographviz.Label], "\"", "")
		module := root
		for {
			// Check if the current qualified name (still) starts with a module reference.
			matches := tfModuleRegexp.FindStringSubmatch(resourceQualifiedName)
			if matches == nil {
				// Ok, all modules were stripped from the qualified name
				// and the `module` variable is the resource parent.
				break
			}

			moduleName := matches[1]
			childModule, ok := module.Children[moduleName].(*tfgraph.Module)
			if !ok {
				childModule = tfgraph.NewModule(module, moduleName)
				module.Children[moduleName] = childModule
			}
			module = childModule
			resourceQualifiedName = matches[2]
		}

		// Add a resource node to the current module.
		// TODO
		module.AddChild(&tfgraph.AbstractConfigurationComponent{
			Parent: nil,
			Name:   resourceQualifiedName,
		})
	}

	// Build the output Graphviz graph.
	graphOut := gographviz.NewGraph()
	graphOut.Name = "" // TODO : name or current directory
	graphOut.Directed = true

	// TODO : temp for tests
	output := graphIn.String()
	fmt.Println(output)

	fo, err := os.Create("samples/output.gv")
	if err != nil {
		panic(err)
	}
	defer func() {
		if err := fo.Close(); err != nil {
			panic(err)
		}
	}()
	_, _ = fo.WriteString(output)
}
