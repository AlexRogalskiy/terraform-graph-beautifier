// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 5, 22, 0, 35, 3, 294021145, time.UTC),
		},
		"/index.gohtml": &vfsgen۰CompressedFileInfo{
			name:             "index.gohtml",
			modTime:          time.Date(2020, 5, 22, 0, 10, 37, 211012844, time.UTC),
			uncompressedSize: 4033,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x6d\x6f\xdb\x36\x10\xfe\x9e\x5f\xc1\xa9\x18\x9c\xac\x95\xe4\x64\x4d\xd0\xa9\xb6\xb1\xbc\x54\x5d\x87\x6d\xe9\xb0\x60\xc3\x56\xf4\x03\x45\x9e\x24\x26\x14\x29\x90\xa7\x24\x6a\xe0\xff\x3e\x50\x8a\x2d\xc5\xf5\x5b\x5a\x04\x1b\xbf\x58\x3e\x3e\xbc\x7b\xee\xf8\xf0\x6d\xf4\x0d\xd7\x0c\xeb\x12\x48\x8e\x85\x9c\xec\x8c\xdc\x0f\x91\x54\x65\x63\x0f\x94\xe7\x0c\x40\xf9\x64\x87\x10\x42\x46\x05\x20\x25\x2c\xa7\xc6\x02\x8e\xbd\x0a\x53\xff\x95\xd7\xef\x52\xb4\x80\xb1\xc7\xc1\x32\x23\x4a\x14\x5a\x79\x84\x69\x85\xa0\x70\xec\x5d\x80\x31\x34\xd5\xa6\x70\xa6\x54\x64\x95\xa1\x0e\x41\x32\x43\xcb\x7c\x89\x17\x5a\x61\xae\x4d\xcf\x41\x8e\x58\xda\x28\x0c\x33\x81\x79\x95\x04\x4c\x17\x61\xc9\xa8\x45\x30\x54\x85\x38\xf3\xee\x37\xfe\xfc\x04\x68\x85\x22\x15\x60\xbc\xc9\x4e\xeb\x1b\x05\x4a\x98\xdc\xdd\x05\xef\x69\x06\x17\xee\xcf\x74\x3a\x0a\x5b\xeb\x3d\xa4\xe5\x4d\xac\x61\x5d\x38\xc6\xd5\xa5\x0d\x98\xd4\x15\x4f\x25\x35\xd0\x04\xa6\x97\xf4\x36\x94\x22\xb1\x21\xab\x51\x5b\x46\x4b\x08\xbf\x0f\xf6\x0f\x83\x61\x67\x08\x0a\xa1\x82\x4b\xeb\x35\xae\x67\x4d\x28\x84\xcc\x08\xac\xc7\x9e\xcd\xe9\xc1\xe1\x91\xff\xf6\xf6\xcf\xab\xd3\x9f\x6e\xca\xf4\xdd\x5f\xf9\xa7\x73\xfb\x4b\x52\x69\x7b\x53\x9a\xe2\xf7\xfd\x43\xf5\xfc\xfd\xe1\xdf\xff\xa4\xf1\x9b\xf4\xf9\xc5\x25\x8a\x57\x63\x8f\x30\xa3\xad\xd5\x46\x64\x42\x8d\x3d\xaa\xb4\xaa\x0b\x5d\x59\x6f\x32\x0a\x5b\xee\x93\xd5\x89\x54\xaa\xbc\xca\x1a\xf6\x73\x8a\x3e\xd3\x16\xfc\x44\xc8\x2b\x50\xf8\xe3\xcb\x60\xd8\xe7\xff\xa0\xd3\x25\xd2\x0b\x32\x0a\x5b\x55\x8c\x2c\xd6\xae\x7c\x2e\xe8\x33\x56\x93\xbb\x79\xb2\x37\x82\x63\x1e\x91\xfd\xe1\xf0\xdb\xd7\x73\x63\x0e\x22\xcb\x71\xd1\x5a\x6a\x2b\x9c\x14\x22\x42\x13\xab\x65\x85\xd0\xf5\xa1\x2e\x23\x32\x2c\x6f\x3b\x8b\x84\x14\x7b\xa6\xe9\xce\x28\xbc\x27\x31\x4a\x34\xaf\x27\x3b\x23\x2e\xae\x89\xe0\x63\x8f\xd5\x8e\x32\x17\xd7\x8e\x67\xaf\x3a\x4c\x2b\x8b\x84\xd5\x64\x4c\xe6\xc9\xee\x76\xcc\x9d\xe0\xa8\x50\x60\x22\xc2\x35\xab\x0a\x97\x7d\x06\xf8\x46\x82\xfb\x3c\xa9\xdf\xf1\xdd\x01\xab\x07\x7b\x2f\x3a\x4a\xb4\xd6\x15\x46\xbd\xec\x5d\x0b\x43\x27\xe4\x88\x0c\x5c\x1d\x07\x0f\xba\x7a\x1d\xb3\x02\x0f\x3a\x77\xd3\xee\xb3\xc9\x2c\x22\x1f\x1e\x8c\x7e\x18\xa6\x81\x81\x04\x86\xda\x44\x64\xa0\x34\x87\x9e\xaf\x05\x47\x9f\x0f\x75\x6d\x20\x69\x02\x72\x10\x91\x01\xa7\x48\x77\x9b\x7f\x7b\x4b\x9c\x34\x58\x9b\xd3\x12\x1c\xd6\x00\x43\xaa\x32\xb9\x2c\x5c\x83\x6c\x24\xe0\x90\xad\xfb\x15\xa8\x56\x13\x1b\x61\x25\xe5\x5c\xa8\xcc\xe1\xf6\x87\xe5\xed\x2a\x18\xc2\x2d\xfa\xd7\x54\x8a\x4c\x39\x28\x03\x85\x60\xd6\x82\xf3\x2d\xc1\x09\x65\x57\x99\xd1\x95\xe2\x3e\xd3\x52\x1b\x37\xe2\xd9\x9b\xa6\xad\x1c\xa2\x0d\x07\xe3\x37\xb5\x77\x70\xab\xa5\xe0\x1b\xc0\xb3\xa2\xed\xaf\x87\x75\x14\x86\x4d\x5b\xe2\x75\xfa\xc0\x32\x7d\xf1\x38\x0d\x05\x06\xac\xae\x0c\x7b\xbc\x98\x3a\x81\x34\xc5\x5a\x27\x93\x05\x52\x8f\xe6\x78\x4d\x97\x4d\xd7\x96\xf4\x40\x4a\x51\xda\xa7\xa0\x25\x35\xa3\xcb\x84\xfc\x9f\x13\xd3\x15\x96\x15\x7e\x39\x33\x56\xe1\x93\xce\x67\xa1\x79\xb5\xd4\xf1\x7a\x7e\xa9\x56\xe8\xdf\xcc\xf7\x91\x44\xcb\x95\xab\x6c\x61\x7f\x40\x5d\x3e\xd5\xe6\x90\x56\x8a\x35\x17\x9c\x5d\x90\xb0\xb7\x82\x3a\x99\x1f\x47\x25\x95\x80\x08\x64\xbc\xb0\xd9\x7f\x16\xea\x59\x1c\x1f\x9f\x1d\x9f\xad\x60\xd2\x87\x9d\x1d\x1d\x1f\x6e\x86\x9d\xc5\xf1\xc9\xd1\x46\xd8\xe9\x71\x1c\x9f\xc4\x1b\x61\x3f\x9c\xc4\x47\xf1\x66\xd8\xf1\xf0\xf4\xe5\x16\xb0\x93\xb3\x93\x83\x2d\x60\x71\x7c\xba\x4d\xd0\xd8\xb5\xd3\x35\xb0\x8f\xaf\x57\x76\x19\xc0\xca\xa8\xd9\x24\x7d\xf8\x95\x62\x1e\xa4\x52\x6b\xb3\xdb\x7c\x1a\xaa\xb8\x2e\x76\xf7\xc8\x77\x33\x48\x20\x41\x65\x98\xef\xad\xf0\x39\xdd\xf2\xc4\xe0\xba\x4a\x56\x1f\xb0\xff\xb7\x23\xa3\x34\xfa\x5a\xf0\xa5\xab\x64\xcb\x0d\x86\x0b\x5a\x68\xb5\x72\xf5\xf6\x2e\x01\x07\x87\x4b\x2f\x01\x5f\xb1\x03\x01\xcf\x1e\xbf\xf5\x6c\xaa\xbd\x14\x0a\xb6\xa9\x7c\x5b\x86\xe6\xc0\xf5\xa9\x31\xfa\x66\xeb\x41\x48\x4d\x06\xf8\x35\x83\xe6\xd5\x47\x23\xd6\x5e\xe8\x58\x65\xae\xa1\x13\x67\x02\x9f\xc4\xd2\xc9\xfe\x72\x19\xb9\x39\xb8\x3f\x05\xfc\x2f\x3c\x0c\x66\x33\x72\xb0\x4d\x91\xb7\x10\xde\x42\x32\x0b\x57\x7c\x72\x71\x7e\x76\x4e\x22\xe2\x88\xb7\xc4\x08\x87\x12\x94\x93\x29\xd1\x8a\xb4\x85\x26\xee\x81\x3d\x1f\xf9\xb1\x0b\x02\xed\xa3\xc2\x46\xe4\xee\x2e\x78\xeb\x5e\xae\xf7\xcf\x0c\xfb\xf3\x1f\xe7\xbf\x4d\xdb\x68\xd3\xbd\xd7\x3b\xfd\xa7\xd7\xfd\x33\x27\x6c\x1f\xec\xff\x06\x00\x00\xff\xff\x77\x2a\x11\x50\xc1\x0f\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.gohtml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
